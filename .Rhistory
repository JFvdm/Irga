m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean()
x <- c(1,3,2,5,7,43)
makeVector(x)
cachemean(x)
?solve
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NUL
}
get <- function() {x}
setinverse <- function(inverse) {inv <<- inverse}
getinverse <- function() {inv}
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(m)){
message("retrieving cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
matrix <- matrix(1:16, nrow = 4, ncol = 4)
matrix
c <- makeCacheMatrix(matrix)
cachesolve(c)
cacheSolve(c)
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)){
message("retrieving cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
cacheSolve(c)
c
c$get
c$get()
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NUL
}
get <- function() {x}
setinverse <- function(inverse) {inv <<- inverse}
getinverse <- function() {inv}
}
c <- makeCacheMatrix(matrix)
c$get()[1]
c$get()
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NUL
}
get <- function() x
setinverse <- function(inverse) {inv <<- inverse}
getinverse <- function() {inv}
}
c <- makeCacheMatrix(matrix)
c$get()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
v <- makeVector(c(1,2,3,4,5))
v$get()
v$get()[1,2,3,4]
v$get()[1]
v$get()
v <- makeVector(c(1,2,3,4,5))
v$get()
v$get()
v2 <- cachemean(v)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
v <- c(1,2,3,4,5)
t <- makeVector(v)
t$get()
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NUL
}
get <- function() x
setinverse <- function(inverse) {inv <<- inverse}
getinverse <- function() {inv}
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)){
message("retrieving cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
m <- matrix(1:16, nrow = 4, ncol = 4)
a <- makeCacheMatrix(n)
a <- makeCacheMatrix(m)
a$get()
m
as.matrix(m)
is.matrix(m)
a <- makeCacheMatrix(m)
a
a$get()
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NUL
}
get <- function() return(x)
setinverse <- function(inverse) {inv <<- inverse}
getinverse <- function() {inv}
}
a <- makeCacheMatrix(m)
a$get()
a$get
m
t
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NUL
}
get <- function() x
setinverse <- function(inverse) {inv <<- inverse}
getinverse <- function() {inv}
}
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NUL
}
get <- function() {x}
setinverse <- function(inverse) {inv <<- inverse}
getinverse <- function() {inv}
}
x <- matrix(1:16)
x
x <- matrix(1:16, nrow = 4, ncol =4)
x
makeCacheMatrix(x)
t <- makeCacheMatrix(x)
t
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NUL
}
get <- function() {x}
setinverse <- function(inverse) {inv <<- inverse}
getinverse <- function() inv
}
t <- makeCacheMatrix(x)
t
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NUL
}
get <- function() {x}
setinverse <- function(inverse) {inv <<- inverse}
getinverse <- function() {inv}
}
t <- makeCacheMatrix(x)
t
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
vec <- c(1,2,3,4,5)
m <- makeVector(vec)
m
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NUL
}
get <- function() {x}
setinverse <- function(inverse) {inv <<- inverse}
getinverse <- function() {inv}
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
t <- makeCacheMatrix(x)
t
t$get
t$get()
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)){
message("retrieving cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
cacheSolve(t)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NUL
}
get <- function() {x}
setinverse <- function(inverse) {inv <<- inverse}
getinverse <- function() {inv}
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)){
message("retrieving cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
m <- matrix(1:16, nrow = 4, ncol = 4)
m
t <- MakeCacheMatrix(m)
t <- makeCacheMatrix(m)
t
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)){
message("retrieving cached data")
return(inv)
}else {
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv}
}
cachSolve(t)
cacheSolve(t)
cachSolve(t)
cacheSolve(t)
cacheSolve <- function(x, ...) {
#inv <- x$getinverse()
#if(!is.null(inv)){
#        message("retrieving cached data")
#        return(inv)
#}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
cacheSolve(t)
t
t$get()
solve(m)
?solve
m
solve(m)
t <- matrix(c(0,2,0,1), nrow = 2, ncol = 2)
t
solve(t)
t <- matrix(1:4, nrow = 2, ncol = 2)
t
solve(t)
makeCacheMatrix(t)
m <- makeCacheMatrix(t)
cacheSolve(m)
t$getinverse()
m$getinverse()
cacheSolve(m)
m
cacheSolve(m)
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)){
message("retrieving cached data")
return(inv)
} else{
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv}
}
cacheSolve(m)
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)){
message("retrieving cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
cacheSolve(m)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NUL
}
get <- function() {x}
setinverse <- function(inverse) {inv <<- inverse}
getinverse <- function() {inv}
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)){
message("retrieving cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NUL
}
get <- function() {x}
setinverse <- function(inverse) {inv <<- inverse}
getinverse <- function() {inv}
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)){
message("retrieving cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
m <- matrix(1:4, nrow = 2, ncol = 2)
t <- makeCacheMatrix(m)
cacheSolve(t)
cacheSolve(t)
makeCacheMatrix <- function(x = matrix()) {
## Initialize the stored variables. They are only updated to have a non-null
## value when the inverse is solved. The cached matrix essentially tracks
## changes to the matrix between calls to solve for the inverse.
cacheMatrix <- NULL
inverse <- NULL
## The set function for the matrix updates the object while clearing its
## cached version and the inverse.
set <- function(newMatrix) {
x <<- y
cacheMatrix <<- NULL
inverse <<- NULL
}
get <- function(){x}
## Get and set functions for the stored matrix
setCacheMatrix <- function(updatedMatrix){cacheMatrix <<- updatedMatrix}
getCacheMatrix <- function(){cacheMatrix}
## Get and set functions for the stored inverse
setInverse <- function(newInverse){inverse <<- newInverse}
getInverse <- function(){inverse}
## Create and return a list that maintains the functions available to the
## special matrix objects for easier access.
list(set = set, get = get, getCacheMatrix = getCacheMatrix,
setInverse = setInverse, getInverse = getInverse)
}
## This function solves for the inverse of a given "special" matrix object,
## skipping computation if the inverse has already been solved and the matrix
## hasn't been updated.
cacheSolve <- function(x, ...) {
## First get the inverse and the matrix used to generate the inverse.
inversedMatrix <- x$getCacheMatrix()
currentInverse <- x$getInverse()
## If the inverse isn't null and th matrix hasn't been updated after
## calculating that inverse, return the inverse.
if(!is.null(currentInverse) && identical(x, inversedMatrix)) {
message("Getting cached data")
return(currentInverse)
}
## Otherwise, solve for the new inverse...
data <- x$get()
currentInverse <- solve(data)
## ...and update the inverse and matrix in the cache.
x$setInverse(currentInverse)
x$setCacheMatrix(data)
## Finally, return the new inverse.
currentInverse
}
t <- makeCahcematrix(m)
t <- makeCachematrix(m)
t <- makeCacheMatrix(m)
cacheSolve(t)
q()
FileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(FileUrl, "property.csv")
download.file(FileUrl, "property.csv")
download.file(FileUrl, "property.csv")
FileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(FileUrl, "property.csv")
getwd()
setwd("C:/Users/Dell/Documents/Repositories/Speel/amy")
getwd()
library(xlsx)
library("rJava", lib.loc="~/R/win-library/3.2")
detach("package:rJava", unload=TRUE)
library("rJava", lib.loc="~/R/win-library/3.2")
detach("package:rJava", unload=TRUE)
library("rJava", lib.loc="~/R/win-library/3.2")
detach("package:rJava", unload=TRUE)
install.packages("rJava")
library("rJava", lib.loc="~/R/win-library/3.2")
detach("package:rJava", unload=TRUE)
library("xlsx", lib.loc="~/R/win-library/3.2")
detach("package:xlsx", unload=TRUE)
library("xlsx", lib.loc="~/R/win-library/3.2")
remove.packages("xlsx", lib="~/R/win-library/3.2")
library("rJava", lib.loc="~/R/win-library/3.2")
remove.packages("rJava", lib="~/R/win-library/3.2")
install.packages("xlsx")
library(xlsx)
library(xlsx)
