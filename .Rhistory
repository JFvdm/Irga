set <- function(y){
x <<- y
inv <<- NUL
}
get <- function() {x}
setinverse <- function(inverse) {inv <<- inverse}
getinverse <- function() {inv}
}
x <- matrix(1:16)
x
x <- matrix(1:16, nrow = 4, ncol =4)
x
makeCacheMatrix(x)
t <- makeCacheMatrix(x)
t
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NUL
}
get <- function() {x}
setinverse <- function(inverse) {inv <<- inverse}
getinverse <- function() inv
}
t <- makeCacheMatrix(x)
t
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NUL
}
get <- function() {x}
setinverse <- function(inverse) {inv <<- inverse}
getinverse <- function() {inv}
}
t <- makeCacheMatrix(x)
t
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
vec <- c(1,2,3,4,5)
m <- makeVector(vec)
m
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NUL
}
get <- function() {x}
setinverse <- function(inverse) {inv <<- inverse}
getinverse <- function() {inv}
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
t <- makeCacheMatrix(x)
t
t$get
t$get()
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)){
message("retrieving cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
cacheSolve(t)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NUL
}
get <- function() {x}
setinverse <- function(inverse) {inv <<- inverse}
getinverse <- function() {inv}
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)){
message("retrieving cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
m <- matrix(1:16, nrow = 4, ncol = 4)
m
t <- MakeCacheMatrix(m)
t <- makeCacheMatrix(m)
t
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)){
message("retrieving cached data")
return(inv)
}else {
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv}
}
cachSolve(t)
cacheSolve(t)
cachSolve(t)
cacheSolve(t)
cacheSolve <- function(x, ...) {
#inv <- x$getinverse()
#if(!is.null(inv)){
#        message("retrieving cached data")
#        return(inv)
#}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
cacheSolve(t)
t
t$get()
solve(m)
?solve
m
solve(m)
t <- matrix(c(0,2,0,1), nrow = 2, ncol = 2)
t
solve(t)
t <- matrix(1:4, nrow = 2, ncol = 2)
t
solve(t)
makeCacheMatrix(t)
m <- makeCacheMatrix(t)
cacheSolve(m)
t$getinverse()
m$getinverse()
cacheSolve(m)
m
cacheSolve(m)
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)){
message("retrieving cached data")
return(inv)
} else{
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv}
}
cacheSolve(m)
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)){
message("retrieving cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
cacheSolve(m)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NUL
}
get <- function() {x}
setinverse <- function(inverse) {inv <<- inverse}
getinverse <- function() {inv}
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)){
message("retrieving cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NUL
}
get <- function() {x}
setinverse <- function(inverse) {inv <<- inverse}
getinverse <- function() {inv}
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)){
message("retrieving cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
m <- matrix(1:4, nrow = 2, ncol = 2)
t <- makeCacheMatrix(m)
cacheSolve(t)
cacheSolve(t)
makeCacheMatrix <- function(x = matrix()) {
## Initialize the stored variables. They are only updated to have a non-null
## value when the inverse is solved. The cached matrix essentially tracks
## changes to the matrix between calls to solve for the inverse.
cacheMatrix <- NULL
inverse <- NULL
## The set function for the matrix updates the object while clearing its
## cached version and the inverse.
set <- function(newMatrix) {
x <<- y
cacheMatrix <<- NULL
inverse <<- NULL
}
get <- function(){x}
## Get and set functions for the stored matrix
setCacheMatrix <- function(updatedMatrix){cacheMatrix <<- updatedMatrix}
getCacheMatrix <- function(){cacheMatrix}
## Get and set functions for the stored inverse
setInverse <- function(newInverse){inverse <<- newInverse}
getInverse <- function(){inverse}
## Create and return a list that maintains the functions available to the
## special matrix objects for easier access.
list(set = set, get = get, getCacheMatrix = getCacheMatrix,
setInverse = setInverse, getInverse = getInverse)
}
## This function solves for the inverse of a given "special" matrix object,
## skipping computation if the inverse has already been solved and the matrix
## hasn't been updated.
cacheSolve <- function(x, ...) {
## First get the inverse and the matrix used to generate the inverse.
inversedMatrix <- x$getCacheMatrix()
currentInverse <- x$getInverse()
## If the inverse isn't null and th matrix hasn't been updated after
## calculating that inverse, return the inverse.
if(!is.null(currentInverse) && identical(x, inversedMatrix)) {
message("Getting cached data")
return(currentInverse)
}
## Otherwise, solve for the new inverse...
data <- x$get()
currentInverse <- solve(data)
## ...and update the inverse and matrix in the cache.
x$setInverse(currentInverse)
x$setCacheMatrix(data)
## Finally, return the new inverse.
currentInverse
}
t <- makeCahcematrix(m)
t <- makeCachematrix(m)
t <- makeCacheMatrix(m)
cacheSolve(t)
q()
FileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(FileUrl, "property.csv")
download.file(FileUrl, "property.csv")
download.file(FileUrl, "property.csv")
library(xlsx)
getwd()
setwd("C:/Users/Dell/Documents/Repositories/Speel/amy")
a = read.table("A. magellanica LR 10oC rep 7_.csv")
a = read.table("A. magellanica LR 10oC rep 7_")
a = read.table("A. magellanica LR 10oC rep 7_.xlsx")
a = read.table("A. magellanica LR 10oC rep 7_.xls")
?read.table
a = read.table("A. magellanica LR 10oC rep 7_.xls", na.strings = "")
a = read.table("A. magellanica LR 10oC rep 7_.xls", na.strings = "", skip = 10)
warninngs()
warnings()
?file
con <- file("A. magellanica LR 10oC rep 7_.xls", open = "rt" raw = T)
con <- file("A. magellanica LR 10oC rep 7_.xls", open = "rt", raw = T)
text <- readLines(con, skipNul = T)
close(con)
text
text
con <- file("A. magellanica LR 10oC rep 7_.csv", open = "rt", raw = T)
text <- readLines(con, skipNul = T)
close(con)
text
?readLines
head(text)
head(text, 15)
text <- text[11:length(text)]
head(text)
class(text)
FileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(FileUrl, "property.csv")
getwd()
setwd
setwd(C:/Users/Dell/Documents)
setwd("C:/Users/Dell/Documents")
getwd()
data <- read.table("property.csv")
head(data)
View(data)
?read.data
?read.table
, sep = ",", header = T
data <- read.table("property.csv", sep = ",", header = T)
head(data)
View(data)
library(data.table)
sum(data$VAL >= 14, na.rm = T)
data$VAL <- as.numeric(data$VAL)
sum(data$VAL >= 14, na.rm = T)
sum(data$VAL >= 15, na.rm = T)
sum(data$VAL >= 24, na.rm = T)
FileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx "
download.file(FileUrl, "Gas.xls")
download.file(FileUrl, "Gas.xls")
download.file(FileUrl, "Gas.xlsx")
download.file(FileUrl, "Gas.xlsx", method = "curl")
FileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(FileUrl, "Gas.xlsx")
download.file(FileUrl, "Gas.xlsx", method = "wb")
?download.file
download.file(FileUrl, "Gas.xlsx", mode= "wb")
?read.table
dat <- read.table("Gas.xlsx", header = T, row.names = 18:23, col.names = 7:15)
library(xlsx)
library(rJava)
library(rJava)
library(rJava)
library(rJava)
library(xlsx)
?read.xlsx
("Gas.xlsx", header = T, rowIndex = 18:23, colIndex = 7:15)
dat <- read.xlsx("Gas.xlsx", header = T, rowIndex = 18:23, colIndex = 7:15)
dat <- read.xlsx("Gas.xlsx", header = T, rowIndex = 18:23, colIndex = 7:15, sheetIndex = 1)
dat
sum(dat$Zip*dat$Ext,na.rm=T)
FileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(FileUrl, useInternal = T)
library(XML)
rootnode <- xmlRoot(doc)
doc <- xmlTreeParse(FileUrl, useInternal = T)
FileUrl <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(FileUrl, useInternal = T)
rootnode <- xmlRoot(doc)
rootnode
rootnode <- xmlRoot(doc)
xmlName(rootnode)
nams(rootnode)
names(rootnode)
rootnode[[1]]
rootnode[[2]]
rootnode[[1]][[1]]
rootnode[[1]][[1]]
xmlSApply(rootnode, "//zipcode", xmlValue)
xpathSApply(rootnode, "//zipcode", xmlValue)
zipcodes <- xpathSApply(rootnode, "//zipcode", xmlValue)
zipcodes <- as.numeric(zipcodes)
sum(zipcodes == 21231)
FileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(FileUrl, "Gas.csv")
?fread
DT <- fread("Gas.csv")
?mean
DT[,mean(pwgtp15),by=SEX]
setwd("C:/Users/Dell/Documents/Repositories/Speel/amy")
con <- file("A. magellanica LR 10oC rep 7_.csv", open = "rt", raw = T)
text <- readLines(con, skipNul = T)
close(con)
text <- text[11:length(text)]
head(text)
text[2] <- NULL
text[-2]
text <- text[-2]
head(text)
?grepl
text <- text[- grep("Remark")]
text <- text[- grep("Remark", text)]
head(text)
text <- text[- grep("\\", text)]
head(text, 10)
text
text <- text[- grep("\"", text)]
text
as.data.frame(text)
d <- as.data.frame(text)
View(d)
?strsplit
strsplit(text)
strsplit(text, split =",")
strsplit(text, split =",")
?do.call
do.call(rbind, text)
text
text <- strsplit(text, split =",")
text
t <- lapply(t, as.numeric)
?lapply
t <- lapply(t, as.numeric, USE.NAMES = T)
t <- sapply(t, as.numeric, USE.NAMES = T)
class(text)
t <- unlist(text)
t
df <- data.frame(matrix(unlist(text))
df <- data.frame(matrix(unlist(text))
df <- data.frame(matrix(unlist(text)))
head(df)
View(df)
df <- data.frame(matrix(unlist(text)), nrow = lenght(text), byrow = T)
df <- data.frame(matrix(unlist(text)), nrow = length(text), byrow = T)
View(df)
class(text)
df <- as.data.frame(text)
View(df)
length(text)
df <- data.frame(matrix(unlist(text), nrow=15, byrow=T))
View(df)
df <- data.frame(matrix(unlist(text), nrow = length(text), byrow = T)
df <- data.frame(matrix(unlist(text), nrow = length(text), byrow = T)
df <- data.frame(matrix(unlist(text), nrow = length(text), byrow = T))
View(df)
View(df)
colnames(df) <- df[1,]
View(df)
colnames(df) <- df[1, ]
View(df)
df[1,] <- as.character(df[1,])
warning()
warnings()
df[1,] <- as.character(df[1,])
warnings()
df <- data.frame(matrix(unlist(text), nrow = length(text), byrow = T), stringsAsFactors = F)
df[1,] <- as.character(df[1,])
colnames(df) <- df[1, ]
View(df)
df <- df[-1]
View(df)
df <- df[-1,]
View(df)
con <- file("A. magellanica LR 10oC rep 7_.csv", open = "rt", raw = T)
text <- readLines(con, skipNul = T)
close(con)
text <- text[11:length(text)]
text <- text[-2]
text <- text[- grep("Remark", text)]
text <- text[- grep("\"", text)]
text <- strsplit(text, split =",")
df <- data.frame(matrix(unlist(text), nrow = length(text), byrow = T), stringsAsFactors = F)
df[1,] <- as.character(df[1,])
colnames(df) <- df[1, ]
df <- df[-1,]
View(df)
unraw <- function(file){
con <- file(file, open = "rt", raw = T)
text <- readLines(con, skipNul = T)
close(con)
text <- text[11:length(text)]
text <- text[-2]
text <- text[- grep("Remark", text)]
text <- text[- grep("\"", text)]
text <- strsplit(text, split =",")
text <- data.frame(matrix(unlist(text), nrow = length(text), byrow = T), stringsAsFactors = F)
text[1,] <- as.character(text[1,])
colnames(text) <- text[1, ]
text <- text[-1,]
text
}
df <- unraw("A. magellanica LR 10oC rep 7_.csv")
View(df)
getwd()
setwd("C:/Users/Dell/Documents/Repositories/Speel")
setwd("C:/Users/Dell/Documents/Repositories/Speel/Irga")
file <- "A. magellanica LR 20oC rep 7_.xlsx"
data  = read.xlsx(file, sheetIndex = 1)
file <- "A. magellanica LR 20oC rep 7_.xls"
data  = read.xlsx(file, sheetIndex = 1)
data  = read.xlsx(file, sheetIndex = 1,header = F)
file <- "A. magellanica LR 15oC 3_ (2).xlsx"
data  = read.xlsx(file, sheetIndex = 1,header = F)
file <- "A. magellanica LR 15oC 3_ (2).xls"
data  = read.xlsx(file, sheetIndex = 1,header = F)
data  = read.xlsx(file, sheetIndex = 1,header = F, rowIndex = 11)
data  = read.xlsx(file, sheetIndex = 1,header = F, rowIndex = 11)
data  = read.xlsx(file, sheetIndex = 1,header = T, rowIndex = 11:13)
install.packages("XLConnect")
?read.xlsx
data  = read.xlsx(file, sheetIndex = 1,header = TRUE, startRow = 1)
